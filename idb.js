function o(e){return new Promise((n,t)=>{e.oncomplete=e.onsuccess=()=>n(e.result),e.onabort=e.onerror=()=>t(e.error)})}function s(e,n){const t=indexedDB.open(e);t.onupgradeneeded=()=>t.result.createObjectStore(n);const r=o(t);return(u,l)=>r.then(c=>l(c.transaction(n,u).objectStore(n)))}let a;function i(){return a||(a=s("keyval-store","keyval")),a}function f(e,n=i()){return n("readonly",t=>o(t.get(e)))}function p(e,n,t=i()){return t("readwrite",r=>(r.put(n,e),o(r.transaction)))}function y(e,n=i()){return n("readwrite",t=>(t.delete(e),o(t.transaction)))}function d(e,n){return e.openCursor().onsuccess=function(){this.result&&(n(this.result),this.result.continue())},o(e.transaction)}function h(e=i()){return e("readonly",n=>{if(n.getAll&&n.getAllKeys)return Promise.all([o(n.getAllKeys()),o(n.getAll())]).then(([r,u])=>r.map((l,c)=>[l,u[c]]));const t=[];return e("readonly",r=>d(r,u=>t.push([u.key,u.value])).then(()=>t))})}export{s as createStore,y as del,h as entries,f as get,p as set};
//# sourceMappingURL=idb.js.map
